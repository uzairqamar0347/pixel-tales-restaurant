-- =================================================================================
-- =================================================================================
--          PIXEL TALES - FULL DEPLOYMENT MASTER BLUEPRINT SCRIPT (v2)
-- ---------------------------------------------------------------------------------
-- This script creates a complete, empty, and secure database.
-- It is safe to run on a brand new, empty Supabase project.
-- =================================================================================
-- =================================================================================

-- =============================================
-- PART 1: CREATE ALL DATABASE TABLES
-- =============================================

create table public.orders (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  items jsonb null,
  total_price numeric null,
  status text null default 'Pending'::text,
  customer_details jsonb null,
  applied_coupon text null,
  discount_percent smallint null,
  access_token text not null default extensions.uuid_generate_v4 (),
  constraint orders_pkey primary key (id),
  constraint orders_access_token_key unique (access_token)
) TABLESPACE pg_default;

create table public.menu_items (
  id bigint generated by default as identity not null,
  name text not null,
  description text null,
  image_url text null,
  category text null,
  price numeric null,
  original_price numeric null,
  is_featured boolean null default false,
  price_small numeric null,
  price_medium numeric null,
  price_large numeric null,
  price_xl numeric null,
  is_available boolean null default true,
  addon_categories text[] null,
  constraint menu_items_pkey primary key (id)
) TABLESPACE pg_default;

create table public.coupons (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  code text not null,
  discount_percent smallint not null,
  is_active boolean not null default true,
  min_cart_value numeric not null default 0,
  expires_at timestamp with time zone null,
  constraint coupons_pkey primary key (id),
  constraint coupons_code_key unique (code),
  constraint coupons_discount_percent_check check (
    (
      (discount_percent > 0)
      and (discount_percent <= 100)
    )
  )
) TABLESPACE pg_default;

create table public.categories (
  id bigint generated by default as identity not null,
  name text not null,
  display_order integer null,
  constraint categories_pkey primary key (id),
  constraint categories_name_key unique (name)
) TABLESPACE pg_default;

create table public.add_ons (
  id bigint generated by default as identity not null,
  name text not null,
  price numeric not null,
  category text not null,
  constraint add_ons_pkey primary key (id)
) TABLESPACE pg_default;

create table public.settings (
  key text not null,
  value jsonb null,
  constraint settings_pkey primary key (key)
) TABLESPACE pg_default;

-- =============================================
-- PART 1.5: INSERT INITIAL SEED DATA
-- =============================================

-- Insert the initial restaurant status, defaulting to closed.
INSERT INTO public.settings (key, value)
VALUES ('restaurant_status', '{ "isOpen": false }');

-- ADD THIS NEW LINE
-- Insert the initial daily special, defaulting to an empty, inactive state.
INSERT INTO public.settings (key, value)
VALUES ('daily_special', '{ "message": "", "isActive": false }');

-- =================================================================
-- PART 2: ENABLE ROW LEVEL SECURITY (RLS) ON ALL TABLES
-- This step is CRITICAL. Without it, policies are inactive.
-- =================================================================

alter table public.orders enable row level security;
alter table public.menu_items enable row level security;
alter table public.coupons enable row level security;
alter table public.categories enable row level security;
alter table public.add_ons enable row level security;
alter table public.settings enable row level security;

-- =============================================
-- PART 3: CREATE FINAL, OPTIMIZED TABLE POLICIES
-- =============================================

-- --- Policies for the 'orders' table (unchanged from our secure setup) ---
CREATE POLICY "Public can create new orders" ON public.orders FOR INSERT TO public WITH CHECK (true);
CREATE POLICY "Public can view their own orders for tracking" ON public.orders FOR SELECT TO public USING (true);
CREATE POLICY "Admins can read all orders" ON public.orders FOR SELECT TO authenticated USING (true);
CREATE POLICY "Admins can update all orders" ON public.orders FOR UPDATE TO authenticated USING (true) WITH CHECK (true);
CREATE POLICY "Public can read settings" ON public.settings FOR SELECT TO public USING (true);
CREATE POLICY "Admins can update settings" ON public.settings FOR UPDATE TO authenticated USING (true) WITH CHECK (true);

-- --- Policies for MENU_ITEMS ---
CREATE POLICY "Public can view menu_items" ON public.menu_items FOR SELECT TO public USING (true);
CREATE POLICY "Admins have full control of menu" ON public.menu_items FOR ALL TO authenticated USING (true) WITH CHECK (true);


-- --- Policies for CATEGORIES ---
CREATE POLICY "Public can view categories" ON public.categories FOR SELECT TO public USING (true);
CREATE POLICY "Admins have full control of categories" ON public.categories FOR ALL TO authenticated USING (true) WITH CHECK (true);


-- --- Policies for ADD_ONS ---
CREATE POLICY "Public can view add_ons" ON public.add_ons FOR SELECT TO public USING (true);
CREATE POLICY "Admins have full control of addons" ON public.add_ons FOR ALL TO authenticated USING (true) WITH CHECK (true);


-- --- Policies for COUPONS ---
CREATE POLICY "Public can view coupons" ON public.coupons FOR SELECT TO public USING (true);
CREATE POLICY "Admins have full control of coupons" ON public.coupons FOR ALL TO authenticated USING (true) WITH CHECK (true);


-- =================================================================
-- PART 4: CREATE STORAGE POLICIES FOR IMAGE UPLOADS
-- These rules secure the 'menu-images' bucket.
-- =================================================================

CREATE POLICY "Allow public read access to menu images" ON storage.objects FOR SELECT TO public USING ( bucket_id = 'menu-images' );
CREATE POLICY "Allow authenticated inserts in menu-images" ON storage.objects FOR INSERT TO authenticated WITH CHECK ( bucket_id = 'menu-images' );
CREATE POLICY "Allow authenticated updates in menu-images" ON storage.objects FOR UPDATE TO authenticated USING ( bucket_id = 'menu-images' );
CREATE POLICY "Allow authenticated deletes from menu-images" ON storage.objects FOR DELETE TO authenticated USING ( bucket_id = 'menu-images' );


-- =================================================================
-- PART 5: ACTIVATE REALTIME BROADCASTING
-- This command enables live updates for the orders table.
-- =================================================================

alter publication supabase_realtime add table public.orders;
alter publication supabase_realtime add table public.settings;

-- =================================================================================
-- PART 6: SYNC ID COUNTERS (SEQUENCES) - CORRECTED
-- This version only runs if data exists, preventing errors on a clean install.
-- =================================================================================

-- Sync the ID counter for 'menu_items' ONLY IF the table is not empty.
SELECT setval(
  pg_get_serial_sequence('public.menu_items', 'id'),
  (SELECT MAX(id) FROM public.menu_items)
) WHERE (SELECT MAX(id) FROM public.menu_items) IS NOT NULL;

-- Sync the ID counter for 'categories' ONLY IF the table is not empty.
SELECT setval(
  pg_get_serial_sequence('public.categories', 'id'),
  (SELECT MAX(id) FROM public.categories)
) WHERE (SELECT MAX(id) FROM public.categories) IS NOT NULL;

-- Sync the ID counter for 'add_ons' ONLY IF the table is not empty.
SELECT setval(
  pg_get_serial_sequence('public.add_ons', 'id'),
  (SELECT MAX(id) FROM public.add_ons)
) WHERE (SELECT MAX(id) FROM public.add_ons) IS NOT NULL;

-- Sync the ID counter for 'coupons' ONLY IF the table is not empty.
SELECT setval(
  pg_get_serial_sequence('public.coupons', 'id'),
  (SELECT MAX(id) FROM public.coupons)
) WHERE (SELECT MAX(id) FROM public.coupons) IS NOT NULL;

-- Sync the ID counter for 'orders' ONLY IF the table is not empty.
SELECT setval(
  pg_get_serial_sequence('public.orders', 'id'),
  (SELECT MAX(id) FROM public.orders)
) WHERE (SELECT MAX(id) FROM public.orders) IS NOT NULL;

-- =================================================================================
--                              END OF SCRIPT
-- =================================================================================